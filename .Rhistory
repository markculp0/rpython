install.packages("tidyverse")
library(dplyr)
q()
library(ggplot2)
mpg
ggplot(data = mpg) + geom_point(mapping = aes(x=displ, y=hwy))
ggplot(data = mpg) + geom_point(mapping = aes(x=displ, y=hwy, color=class))
ggplot(data = mpg) + geom_point(mapping = aes(x=displ, y=hwy, size=class))
ggplot(data = mpg) + geom_point(mapping = aes(x=displ, y=hwy, alpha=class))
ggplot(data = mpg) + geom_point(mapping = aes(x=displ, y=hwy, shape=class))
ggplot(data = mpg) + geom_point(mapping = aes(x=displ, y=hwy), color=blue)
ggplot(data = mpg) + geom_point(mapping = aes(x=displ, y=hwy), color="blue")
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y=hwy)) +
facet_wrap(~ class, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y=hwy)) +
facet_grid(drv ~ cyl)
q()
install.packages(c("backports", "broom", "callr", "cli", "clipr", "cpp11", "digest", "dplyr", "glue", "jsonlite", "knitr", "labeling", "MASS", "mgcv", "nlme", "openssl", "processx", "ps", "readr", "rlang", "rmarkdown", "stringi", "survival", "tibble", "tidyr", "tinytex", "vctrs", "withr", "xfun"))
df <- tibble()
library(tidyverse)
df <- tibble(a=rnorm(5),b=rnorm(5), c=rnorm(5))
View(df)
out <- vector("list", 3)
for(i in seq_along(df)){out[[i]] <- df[[i]]}
names(out) <- names(df)
out2 <- bind_rows(out)
View(out2)
q()
install.packages(c("backports", "cli", "codetools", "colorspace", "cpp11", "dbplyr", "digest", "generics", "KernSmooth", "lubridate", "magrittr", "nlme", "pillar", "R6", "rprojroot", "rstudioapi", "testthat", "tinytex", "vctrs", "xfun"))
q()
install.packages(c("backports", "BH", "broom", "cpp11", "diffobj", "foreign", "ggplot2", "htmltools", "isoband", "jsonlite", "Matrix", "nlme", "pkgbuild", "processx", "ps", "rlang", "rmarkdown", "testthat", "tinytex", "vctrs", "xfun"))
q()
q()
install.packages("tidyverse")
install.packages("readxl")
install.packages("writexl")
install.packages("lubridate")
install.packages("reticulate")
q()
q()
q()
q()
install.packages(c("backports", "fs", "glue", "knitr", "xfun"))
library(reticulate)
sp <- import("scipy")
pd <- import("pandas")
nm <- pd$Series(['ar','mo'])
nm <- pd$Series(["ar","mo"])
nm <- pd$Series([1,2])
nm <- pd$Series(1,2)
df <- mtcars
View(df)
pydf <- reticulate::r_to_py(df)
View(pydf)
repl_python()
import pandas as pd
s1 = pd.Series(["ar","mo"])
s2 = pd.Series(["bville",'joplin"])
s2 = pd.Series(["bville","joplin"])
df = pd.DataFrame(s1,s2)
View(df)
del s1
del s2
del df
df = pd.DataFrame('s1':['ar','mo'],'s2':['bv','jp'])
d = {('s1':['ar','mo'],'s2':['bv','jp'])}
d = {'s1':['ar','mo'],'s2':['bv','jp']}
d
df = pd.DataFrame(d)
View(df)
exit
reticulate::repl_python()
import pandas as pd
View(df)
print(dfs)
df = pd.DataFrame(d)
exit
source_python("pandas.py")
View(df)
rdf <- py_to_r(df)
rdf <- py_to_r("df")
rdf <- py_to_r(df)
library(reticulate)
rdf <- py_to_r(df)
View(df)
q()
q()
install.packages(c("DBI", "openssl", "pkgbuild", "tinytex"))
q(\)
q()
q()
q()
q()
library(reticulate)
pandas <- import("pandas")
numpy <- import("numpy")
scipy <- import("scipy")
openpyxl <- import("openpyxl")
repl_python()
import numpy as np
import pandas as pd
from pandas import Series, DataFrame
np.arange(8)
so = Series(np.arange(8), index=[1..8])
so = Series(np.arange(8), index=[1:8])
so = Series(np.arange(8), index=[np.arange(8)])
so[3]
so = Series(np.random.rand(8), index=[np.arange(8)])
exit
q()
q()
library(reticulate)
source("regex_log_parse.py")
setwd("~/code/python/reticulate")
library(reticulate)
source("regex_log_parse.py")
repl_python()
import os
import sys
import re
quit
library(reticulate)
source("regex_log_parse.py")
library(reticulate)
use_virtualenv("r-reticulate")
source("regex_log_parse.py")
source("test.py")
source_python("test.py")
source_python("regex_log_parse.py")
log <- get_log()
log2 <- as.data.frame(log)
View(log2)
library(reticulate)
source_python("regex_log_parse.py")
# Import dict as a list
log <- get_log()
log <- as.data.frame(log)
rm(log2)
rm(r, get_log)
View(log)
setwd("~/code/r/project/rpython/1_3_py_source_scripts")
library(reticulate)
source_python("regex_log_parse.py")
source_python("rdata/regex_log_parse.py")
# Import dict as a list
log <- get_log()
# Import dict as a list
log <- get_log()
source_python("rdata/regex_log_parse.py")
# Import dict as a list
log <- get_log()
setwd("~/code/r/project/rpython")
q()
